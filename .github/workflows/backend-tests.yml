name: Backend Tests

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-tests.yml'
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-tests.yml'

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./backend
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: './backend/package-lock.json'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting (if available)
      run: |
        if npm run lint --silent 2>/dev/null; then
          echo "Running linting..."
          npm run lint
        else
          echo "No lint script found, skipping linting"
        fi
      continue-on-error: false
      
    - name: Run type checking (if available)
      run: |
        if npm run typecheck --silent 2>/dev/null; then
          echo "Running type checking..."
          npm run typecheck
        else
          echo "No typecheck script found, skipping type checking"
        fi
      continue-on-error: false
      
    - name: Setup test database
      run: |
        export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/test_db"
        echo "DATABASE_URL=$DATABASE_URL" >> $GITHUB_ENV
        if npm run db:migrate --silent 2>/dev/null; then
          echo "Running database migrations..."
          npm run db:migrate
        else
          echo "No db:migrate script found, skipping migrations"
        fi
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        
    - name: Run tests
      run: |
        if npm test --silent 2>/dev/null; then
          echo "Running tests..."
          npm test
        else
          echo "No test script found, skipping tests"
        fi
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        NODE_ENV: test
      
    - name: Run tests with coverage (if available)
      run: |
        if npm run test:coverage --silent 2>/dev/null; then
          echo "Running tests with coverage..."
          npm run test:coverage
        else
          echo "No test:coverage script found, skipping coverage"
        fi
      continue-on-error: true
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        NODE_ENV: test
      
    - name: Upload coverage reports to Codecov
      if: matrix.node-version == 20
      uses: codecov/codecov-action@v3
      with:
        directory: ./backend/coverage
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false